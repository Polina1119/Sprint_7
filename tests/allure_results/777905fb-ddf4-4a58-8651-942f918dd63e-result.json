{"name": "Проверка логина курьера без логина или пароля", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [504]>, kwargs = {}, encoding = 'utf-8'\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n>                   return complexjson.loads(self.content.decode(encoding), **kwargs)\n\n..\\venv\\Lib\\site-packages\\requests\\models.py:960: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\python\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nC:\\python\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001E6FFD3B390>\ns = 'Service unavailable', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\python\\Lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_login.TestLoginCourier object at 0x000001E682F4E390>\nregister_courier = ['wqaxnagbsl', 'dnaehcgjos', 'tankgdwyvo']\n\n    @allure.title('Проверка логина курьера без логина или пароля')\n    def test_login_courier_without_field(self, register_courier):\n        with allure.step('Генерация данных и регистрация курьера'):\n            login = register_courier[0]\n            password = register_courier[1]\n    \n            data = {\n                \"login\": login\n                }\n    \n            data1 = {\n                \"password\": password\n                }\n    \n        with allure.step('Отправка POST запросов, используя сгенерированные данные'):\n            response = requests.post(f'{url}courier/login', data=data)\n            response2 = requests.post(f'{url}courier/login', data=data1)\n    \n        with allure.step(\"Проверка сообщения об ошибке\"):\n            assert response2.json()['message'] == \"Недостаточно данных для входа\"\n>           assert response.json()['message'] == \"Недостаточно данных для входа\"\n\ntest_login.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [504]>, kwargs = {}, encoding = 'utf-8'\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n>                   raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE                   requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\venv\\Lib\\site-packages\\requests\\models.py:968: JSONDecodeError"}, "steps": [{"name": "Генерация данных и регистрация курьера", "status": "passed", "start": 1699092372465, "stop": 1699092372465}, {"name": "Отправка POST запросов, используя сгенерированные данные", "status": "passed", "start": 1699092372465, "stop": 1699092432937}, {"name": "Проверка сообщения об ошибке", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n", "trace": "  File \"C:\\Users\\polin\\PycharmProjects\\sprint_7\\tests\\test_login.py\", line 47, in test_login_courier_without_field\n    assert response.json()['message'] == \"Недостаточно данных для входа\"\n  File \"C:\\Users\\polin\\PycharmProjects\\sprint_7\\venv\\Lib\\site-packages\\requests\\models.py\", line 968, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n"}, "start": 1699092432937, "stop": 1699092432939}], "start": 1699092372465, "stop": 1699092432941, "uuid": "5413dac6-d82f-408c-a01e-41dbc661fcf6", "historyId": "c847c75837746f97c3df1bed57389dc8", "testCaseId": "c847c75837746f97c3df1bed57389dc8", "fullName": "test_login.TestLoginCourier#test_login_courier_without_field", "labels": [{"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLoginCourier"}, {"name": "host", "value": "LAPTOP-6O4U7BT3"}, {"name": "thread", "value": "18440-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login"}]}